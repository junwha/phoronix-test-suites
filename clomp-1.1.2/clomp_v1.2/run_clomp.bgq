#!/bin/sh
# Example script for running CORAL RFP runs on a 16GB node of BGQ
# Each BGQ node has 16 cores and 64 hardware threads possible
# Requires CLOMP 1.2 or later for expected results with these inputs
# Written by John Gyllenhaal at LLNL 23Dec2013

# Show what we are doing
set -x

# Srun is used to launch both serial and MPI programs on BGQ backend
# Run on one dedicated node (-N1) and -n 1 indicates just one process
LAUNCHER="srun -N 1 -n 1 "
MPI_LAUNCHER="srun -N 1 "

# Set N to proposed number of threads per MPI task
# On BGQ, 4 threads per core yields best performance, so N = 64
# This is the maximum number of threads possible per node
export N=64

# BGQ' OpenMP runs best with these environment variables set
export BG_SMP_FAST_WAKEUP=YES
export OMP_WAIT_POLICY=ACTIVE


# Strong scaling of 10240 zone input with each thread allocating touched memory
$LAUNCHER ./clomp  4 -1 1024 10 32 1 100 2>&1 > ./01_clomp_strong_10240_ideal_4.out
$LAUNCHER ./clomp 16 -1 1024 10 32 1 100 2>&1 > ./02_clomp_strong_10240_ideal_16.out
$LAUNCHER ./clomp ${N} -1 1024 10 32 1 100 2>&1 > ./03_clomp_strong_10240_ideal_${N}.out

# Weak scaling with 400 zones per thread input with each thread allocating touched memory
$LAUNCHER ./clomp  4 -1 4 400 32 1 100 2>&1 > ./04_clomp_weak_400_ideal_4.out
$LAUNCHER ./clomp 16 -1 16 400 32 1 100 2>&1 > ./05_clomp_weak_400_ideal_16.out
$LAUNCHER ./clomp ${N} -1 $N 400 32 1 100 2>&1 > ./06_clomp_weak_400_ideal_${N}.out

# Weak scaling with 6400 zones per thread input with each thread allocating touched memory
$LAUNCHER ./clomp  4 -1 4 6400 32 1 100 2>&1 > ./07_clomp_weak_6400_ideal_4.out
$LAUNCHER ./clomp 16 -1 16 6400 32 1 100 2>&1 > ./08_clomp_weak_6400_ideal_16.out
$LAUNCHER ./clomp ${N} -1 $N 6400 32 1 100 2>&1 > ./09_clomp_weak_6400_ideal_${N}.out

# Memory bandwidth test with 'ideal' memory layout, each thread allocates touched memory
$LAUNCHER ./clomp ${N} -1 $N 64000 32 1 100 2>&1 > ./10_clomp_weak_64000_ideal_${N}.out
$LAUNCHER ./clomp ${N} -1 $N 640000 32 1 100 2>&1 > ./11_clomp_weak_640000_ideal_${N}.out

# Memory bandwidth test with real but bad for NUMA memory layout, main thread allocates memory
$LAUNCHER ./clomp ${N} 1 $N 400 32 1 100 2>&1 > ./12_clomp_weak_400_numa_${N}.out
$LAUNCHER ./clomp ${N} 1 $N 6400 32 1 100 2>&1 > ./13_clomp_weak_6400_numa_${N}.out
$LAUNCHER ./clomp ${N} 1 $N 64000 32 1 100 2>&1 > ./14_clomp_weak_64000_numa_${N}.out
$LAUNCHER ./clomp ${N} 1 $N 640000 32 1 100 2>&1 > ./15_clomp_weak_640000_numa_${N}.out

# Mixed MPI/OpenMP tests, fill node with MPI tasks until all threads on node are used
# CLOMP (compiled with -DWITH_MPI) uses slowest MPI task times, since everyone will
# wait for that MPI task.  Main thread allocates all memory per MPI task.
# This represents the way many of our MPI/OpenMP run.
#
# On BGQ 64 threads, 16MPI *4 threads, or 4MPI * 16 threads
# -n 16 specifies MPI tasks on the 1 node (due to -N 1 in MPI_LAUNCHER)
M=`expr ${N} / 4`
echo "Running ${M} MPI tasks with 4 threads each on one node"
$MPI_LAUNCHER -n ${M} ./clomp_mpi 4 1 4 400 32 1 100 2>&1 > ./16_clomp_mpi_weak_400_packed_${M}_4.out
$MPI_LAUNCHER -n ${M} ./clomp_mpi 4 1 4 6400 32 1 100 2>&1 > ./17_clomp_mpi_weak_6400_packed_${M}_4.out

M=`expr ${N} / 16`
echo "Running ${M} MPI tasks with 16 threads each on one node"
$MPI_LAUNCHER -n ${M} ./clomp_mpi 16 1 16 400 32 1 100 2>&1 > ./18_clomp_mpi_weak_400_packed_${M}_16.out
$MPI_LAUNCHER -n ${M} ./clomp_mpi 16 1 16 6400 32 1 100 2>&1 > ./19_clomp_mpi_weak_6400_packed_${M}_16.out

echo "Summarizing Data into run_clomp.summary and run_clomp.CORAL_RFP"
tail -n 7 ./[0-1]?_clomp_*.out > run_clomp.summary
grep "CORAL RFP" ./[0-1]?_clomp_*.out > run_clomp.CORAL_RFP

echo "Done with run_clomp"

