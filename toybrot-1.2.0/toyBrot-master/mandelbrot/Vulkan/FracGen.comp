#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1280
#define HEIGHT 720
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct PixelFormat
{
    uint Amask;
    // GLSL doesn't have a char or uint8_t type
    uint Rloss;
    uint Gloss;
    uint Bloss;
    uint Aloss;
    uint Rshift;
    uint Gshift;
    uint Bshift;
    uint Ashift;
};

//alternatively dvec4
struct Region
{
  double Imin;
  double Imax;
  double Rmin;
  double Rmax;
};

layout(binding = 0) buffer buf
{
   uint data[];
};

layout(binding = 1) buffer reg
{
   Region r;
};

layout(binding = 2) buffer fmt
{
   PixelFormat f;
};

uvec4 getColour( uint it)
{
  uvec4 colour;
  colour.r = it == 25600? 0 : min(it, 255);
  colour.g = it == 25600? 0 : min(it, 255);
  colour.b = it == 25600? 0 : 0;
  colour.a = 255;
//  colour.r = static_cast<uint8_t>((255u - colour.r) > 0 ? (255u - colour.r) : (colour.r - 255u));
//  colour.g = static_cast<uint8_t>((255u - colour.g) > 0 ? (255u - colour.g) : (colour.g - 255u));
//  colour.b = static_cast<uint8_t>((255u - colour.b) > 0 ? (255u - colour.b) : (colour.b - 255u));
  return colour;
}

uint MapSDLRGBA(uvec4 colour,  PixelFormat format)
{
    return    (colour.r >> format.Rloss) << format.Rshift
            | (colour.g >> format.Gloss) << format.Gshift
            | (colour.b >> format.Bloss) << format.Bshift
            | ((colour.a >> format.Aloss) << format.Ashift & format.Amask  );
}

void main()
{

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here.
  */
    if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    {
        return;
    }

    uint col = gl_GlobalInvocationID.x;
    uint row = gl_GlobalInvocationID.y;
    uint index = ((row*WIDTH)+col);


    uint iteration_factor = 100;
    uint max_iteration = 256 * iteration_factor;

    double incX = (r.Rmax - r.Rmin) / double(WIDTH);
    double incY = (r.Imax - r.Imin) / double(HEIGHT);

    incX = incX < 0 ? -incX : incX;
    incY = incY < 0 ? -incY : incY;

    double x = r.Rmin+(col*incX);
    double y = r.Imax-(row*incY);
    double x0 = x;
    double y0 = y;

    uint iteration = 0;

    while ( (x*x + y*y <= 4.0)  &&  (iteration < max_iteration) )
    {
        double xtemp = x*x - y*y + x0;
        y = 2.0*x*y + y0;

        x = xtemp;

        iteration++;
    }

    data[index] = MapSDLRGBA(getColour(iteration), f);
}
